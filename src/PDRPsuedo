
//psuedo loop code
void loop{
    //stop if button hit
    while(running){
      if(stop button hit){
        running = false
        setEfforts(0)
         }

    while(side = NULL, and isFirst = NULL){
        getButtonPress()
        side = buttonPressed;
        isFirst = buttonPressed;
        }

        run(side, isFirst);
    }
}


run(isRight, isFirst){
//starting near the intersection facing the roof

    switch(runState){
        case 1
            //return to intersection facing away from roof
            if(isFirst){
                pickUpPanelRoof(side);
                case 3
            }
            else{
                movePanelPickUp(side);
                case 2
            }
        case 2
            pickUpPanelRoof(side);
        case 3 
            placePanelPlat(side);
        case 4
            //return to start position w/ this one
            pickUpPanelPlat(side);
        case 5
            placePanelRoof(side);
        case 6
        //end in starting position
            driveToOtherSide(side);
            return true;
    }
}

movePanelPickUp(side){
    switch(pickRoofState){
        case 1
             if(right){
                turn(90);
            }else{
                turnT(-90);
            }
        case 1
            lineFollowToTargetDistance(distance);
            moveGripper(pickUpPosition);
        case 2
            drive(distToPickUp);
            return true;    
    }

}

pickUpPanelRoof(side){

    switch(pickRoofState){
       case 1
            flashLed();
            waitForInput();
        case 3
            closeGripper();
        case 4
            moveGripper(higher);
        case 5
            drive(backUpDistance);
        case 6
            turn(180);
        return true;       
    }
}

placePanelRoof(side){
    case 1
            lineFollowToTargetDistance(distance);
            moveGripper(placeRoofPosition);
        case 2
            drive(distToPickUp);
        case 3
            moveGripper(placeRoofPosition);
        case 4
            openGripper();
        case 5
            drive(backUpDistance);
        case 6
            turn(180);
        case 7 
            if(followLineTillIntersection){
                return true;
            }
}

placePanelPlat(side){\

    switch(placePlatState){
        case 1
            drive(2);
        case 2
            if(right){
                turn(-90);
            }else{
                turnT(90);
            }
        case 3
            lineFollowToTargetDistance(distance);
        case 4
            moveGripper(platPosition);
        case 5
            openGripper()
        case 6
            if(drive(-distance) && moveGripper(middlePosition)){
                return true;
            }
    }
}

pickUpPanelPlat(side){
    switch(pickPlatState){
        case 1
            drive(distance);
            moveGripper(platPosition);
        case 2
            flashLed();
            waitForInput();
            closeGripper();
        case 3
            drive(-distance);
            moveGripper(middlePosition);
        case 4 
            turn(180);
        case 5
            followLineTillIntersection();
        case 6 
            drive(2);
        case 7
            if(right){
                turn(90);
            }else{
                turnT(-90);
            }
        case 8
            drive(shortDistance);
            return true;
    }
}

driveToOtherSide(side){

    switch(switchSidesState){
        case 1
            drive(distancePassRoof);
        case 2
          if(right){
                turn(-90);
            }else{
                turn(90);
            }
        case 3
            drive(distance);
        case 4
             if(right){
                turn(-90);
            }else{
                turn(90);
            }
        case 5 
            driveTillIntersection()
        case 6
            drive(2);
            return true;

            
    }

}
